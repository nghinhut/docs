@startuml
title Identity Management Service

!if (%file_exists("../shared/functions.iuml"))
    !include ../shared/functions.iuml
!else
    !include https://gitlab.com/nghinhut/docs/raw/master/plantuml/shared/functions.iuml
!endif

rectangle "Identity Management Service" as idm #green
rectangle "Security Considerations" as security_considerations #yellow
rectangle "Privacy Considerations" as privacy_considerations #yellow
rectangle "Goals" as goals #yellow
rectangle "[[$getBaseUrl()/plantuml/IdM/use-case.puml Use cases]]" as use_cases #yellow
rectangle "Requirements" as requirements #yellow
rectangle "Functional" as functional_requirements
rectangle "Non-Functional" as non_functional_requirements
rectangle "Cost Model" as cost_model

goals -- idm
use_cases -- idm
idm -- requirements
security_considerations - idm
idm - privacy_considerations
idm -- cost_model

requirements -- functional_requirements
requirements -- non_functional_requirements

note left of cost_model
    Operation cost:
        - deployment
        - network
        - storage
        - compute
    Development cost:
        - error fix
        - develop new feature
end note

note left of functional_requirements
    Enable ability to store, access and manage users between multiple services, applications
    with application-level encryption
    provide a set of APIs to manage user information:
    * Create user
    * List users
    * Update user
    * Delete user
end note


note right of non_functional_requirements
    * Design for **Best Security**
    * **Good** Performance: api requests **SHOULD** be complete within 5 seconds.
    * Easy to maintain: provide least APIs as possible
    * Scalable & Stateless
    * No outgoing connection (except: database, encryption service)
end note

note left of security_considerations
    * **Data leaking over outgoing connections**:
                1 Over encryption service connections: this prevent by service-level encryption
                2 Over database connections: this prevent by service-level & external encryption
    * **Database deployment**: IdM Service SHOULD deploy on a specify private database,
                database user password length MUST greater than 32 characters.
    * **Database Admin Direct Access**: Service's Database is managed by Service's maintainers,
                they may has access to database but MUST NOT able to read user private information
                even if they has //service key// which they also managed.
                (user information is encrypted by external encryption service before save to database)
    * **Deleting Data**: The storage provider (database) SHOUlD provide some kind of data redundancy to avoid this kind of attack.
                This kind of attack is out of scope for IdM Service.
    * **Naive Implementations of Default-Deny Authorization**: default policy MUST NOT be empty.
    * **Token stealing**: token lifetime SHOUlD be short and MUST NOT over 15 minutes.
end note

note right of privacy_considerations
    **1. User Information at IdM**:
    User information MUST NOT be access by unauthorized clients.
    Direct access to IdM SHOULD be limited to a small set of system trusted clients.
    Third-party and other clients SHOULD get user information via an OpenID Connect Provider with standards grant flows & user consent flow enable.
    **2. Trust Profiles**
    User information likes email, phone number,.. that need additional verification steps SHOULD NOT be verify by administrators or other participants.
end note

note left of goals
    **1 Secure Identity Storage**: application-level encryption with external encryption service
    **2 Central Identity Provider with UMA2 protected**
    **3 Work with OpenID Connect Provider**: has user information needed for OpenID standard claims
    **4 Ability to interchange with other standards**: use gRPC code generate to create a lightweight adapter works with FHIR.
end note
@enduml

