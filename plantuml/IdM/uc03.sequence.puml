@startuml
title Update User (UMA2 Protected)
!pragma teoz true

!if (%file_exists("../shared/functions.iuml"))
    !include ../shared/functions.iuml
!else
    !include https://gitlab.com/nghinhut/docs/raw/master/plantuml/shared/functions.iuml
!endif

participant "Client" as client
participant "IdM Service" as idm
participant "Shared Cache\n(optional)" as cache
participant "Database" as db
participant "UMA2 Authorization Server" as as
participant "Encryption Service" as es


== Authorization ==
activate client
ref over client, idm, as
    [[$getBaseUrl()/plantuml/IdM/create-permission-ticket.function.puml{} Create Permission Ticket]] with resources scopes = [ 'update-user' ]
end

{start_d1} client ->> idm : request update user 197 with access token (RPT)
note left
    userId: 197
    {
        ..
    }
end note

activate idm
idm -> idm : tokenIntrospect()
activate idm
    opt for additional validation\n(offer better security but increases request duration
        ref over idm, as
            Introspect token with Authz Server
        end
    end
deactivate idm


idm -> idm : policyEnforce()


== Updating ==
' Disable version(updated_at) check to reducing execute time (expect client to send valid request)
'ref over idm
'    [[$getBaseUrl()/plantuml/IdM/query-encrypted-users.function.puml Query Encrypted Users]] with id = 197
'end
'break updated_at (from db) != updated_at (from request)
'    client <-- idm : Error conflict (HTTP Status 409 Conflict) -> Time conflict
'end

loop for each not null attribute in user's attributes (request)
    note right of idm
        Assume all not null fields received are those that need to change
        The change detection SHOULD be perform on client side to avoid adding costly change detection mechanics,
        or perform unnecessary encryption on server side,
        while also reducing network load
    end note

    ref over idm, es
        Encrypt user's attribute by [[$getBaseUrl()/plantuml/encryption.function.puml Encryption($attribute)]]
    end

    idm -> idm : user.setAttribute($attribute.key, $attribute.value //<encrypted>//)
end


'idm <<-- es
'deactivate es

idm -> db : save()
note right of db
    UPDATE users
        SET ...
    WHERE userId = $1 AND updated_at = $2

    *note the updated_at acting like a version field (OCC)
end note
idm <-- db : result

break the result is empty (unexpected user change)
    client <- idm : HTTP Status 409 Conflict -> User change conflict
end

{end_d1} client <<-- idm : return success response (empty body) (HTTP Status 204)
deactivate client

== Post-Update Tasks ==
idm -> idm : prepare shared cache for later usage
activate idm
'    idm -> cache : deleteSharedCache()
'    note right
'        it's safer to delete shared cache first
'        avoid conflict if adding failed
'    end note
    ref over idm, cache
        Adding data to Shared Cache
    end
deactivate idm


idm -> idm : createBlindIndex()
activate idm
    loop for each attribute in ['username', 'email', 'first_name', 'last_name']
        idm -> idm : hash_hmac('sha256', $attribute, $masterKey)
    end
    idm -> db : updateBlindIndex()
        db -> db : INSERT ... INTO "[[$getBaseUrl()/plantuml/class.puml UsersFilters]]"
    idm <<-- db
deactivate idm

deactivate idm


'Duration Constrains
{start_d1} <-> {end_d1} : <1s (the shorter the better)
@enduml
